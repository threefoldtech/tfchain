
//! Autogenerated weights for validatorset
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ragnar`, CPU: `Intel(R) Core(TM) i7-10750H CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../target/release/tfchain
// benchmark
// pallet
// --chain=dev
// --pallet=validatorset
// --extrinsic=*
// --steps=50
// --repeat=20
// --execution=wasm
// --heap-pages=409
// --output
// ../pallets/substrate-validator-set/src/weights.rs
// --template
// ./frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for validatorset.
pub trait WeightInfo {
	fn add_validator() -> Weight;
	fn remove_validator() -> Weight;
	fn add_validator_again() -> Weight;
}

/// Weights for validatorset using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: ValidatorSet Validators (r:1 w:1)
	/// Proof Skipped: ValidatorSet Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ValidatorSet ApprovedValidators (r:1 w:1)
	/// Proof Skipped: ValidatorSet ApprovedValidators (max_values: Some(1), max_size: None, mode: Measured)
	fn add_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `139`
		//  Estimated: `1624`
		// Minimum execution time: 24_614_000 picoseconds.
		Weight::from_parts(25_225_000, 1624)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: ValidatorSet Validators (r:1 w:1)
	/// Proof Skipped: ValidatorSet Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ValidatorSet ApprovedValidators (r:1 w:0)
	/// Proof Skipped: ValidatorSet ApprovedValidators (max_values: Some(1), max_size: None, mode: Measured)
	fn remove_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `205`
		//  Estimated: `1690`
		// Minimum execution time: 20_152_000 picoseconds.
		Weight::from_parts(20_484_000, 1690)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: ValidatorSet ApprovedValidators (r:1 w:0)
	/// Proof Skipped: ValidatorSet ApprovedValidators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ValidatorSet Validators (r:1 w:1)
	/// Proof Skipped: ValidatorSet Validators (max_values: Some(1), max_size: None, mode: Measured)
	fn add_validator_again() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `172`
		//  Estimated: `1657`
		// Minimum execution time: 21_948_000 picoseconds.
		Weight::from_parts(22_780_000, 1657)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: ValidatorSet Validators (r:1 w:1)
	/// Proof Skipped: ValidatorSet Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ValidatorSet ApprovedValidators (r:1 w:1)
	/// Proof Skipped: ValidatorSet ApprovedValidators (max_values: Some(1), max_size: None, mode: Measured)
	fn add_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `139`
		//  Estimated: `1624`
		// Minimum execution time: 24_614_000 picoseconds.
		Weight::from_parts(25_225_000, 1624)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: ValidatorSet Validators (r:1 w:1)
	/// Proof Skipped: ValidatorSet Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ValidatorSet ApprovedValidators (r:1 w:0)
	/// Proof Skipped: ValidatorSet ApprovedValidators (max_values: Some(1), max_size: None, mode: Measured)
	fn remove_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `205`
		//  Estimated: `1690`
		// Minimum execution time: 20_152_000 picoseconds.
		Weight::from_parts(20_484_000, 1690)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: ValidatorSet ApprovedValidators (r:1 w:0)
	/// Proof Skipped: ValidatorSet ApprovedValidators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ValidatorSet Validators (r:1 w:1)
	/// Proof Skipped: ValidatorSet Validators (max_values: Some(1), max_size: None, mode: Measured)
	fn add_validator_again() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `172`
		//  Estimated: `1657`
		// Minimum execution time: 21_948_000 picoseconds.
		Weight::from_parts(22_780_000, 1657)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}