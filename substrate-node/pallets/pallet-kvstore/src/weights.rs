
//! Autogenerated weights for pallet_kvstore
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-16, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `R1-HP-ProBook-630-G8`, CPU: `11th Gen Intel(R) Core(TM) i5-1135G7 @ 2.40GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/tfchain
// benchmark
// pallet
// --chain=dev
// --pallet=pallet_kvstore
// --extrinsic=*
// --steps=50
// --repeat=20
// --execution=wasm
// --heap-pages=4096
// --output
// pallets/pallet-kvstore/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_kvstore.
pub trait WeightInfo {
	fn set() -> Weight;
	fn delete() -> Weight;
}

/// Weights for pallet_kvstore using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: TFKVStore TFKVStore (r:0 w:1)
	fn set() -> Weight {
		// Minimum execution time: 29_881 nanoseconds.
		Weight::from_ref_time(30_479_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TFKVStore TFKVStore (r:1 w:1)
	fn delete() -> Weight {
		// Minimum execution time: 33_783 nanoseconds.
		Weight::from_ref_time(34_581_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: TFKVStore TFKVStore (r:0 w:1)
	fn set() -> Weight {
		// Minimum execution time: 29_881 nanoseconds.
		Weight::from_ref_time(30_479_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TFKVStore TFKVStore (r:1 w:1)
	fn delete() -> Weight {
		// Minimum execution time: 33_783 nanoseconds.
		Weight::from_ref_time(34_581_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
