use crate::*;
use frame_support::{traits::OnRuntimeUpgrade, weights::Weight};
use log::{info};
use sp_runtime::Saturating;
use sp_std::marker::PhantomData;

#[cfg(feature = "try-runtime")]
use codec::{Decode, Encode};
#[cfg(feature = "try-runtime")]
use sp_std::vec::Vec;

pub struct ReworkBillingLoopInsertion<T: Config>(PhantomData<T>);

impl<T: Config> OnRuntimeUpgrade for ReworkBillingLoopInsertion<T> {
    #[cfg(feature = "try-runtime")]
    fn pre_upgrade() -> Result<Vec<u8>, &'static str> {
        info!("current pallet version: {:?}", PalletVersion::<T>::get());
        assert!(PalletVersion::<T>::get() >= types::StorageVersion::V9);

        let contracts_count: u64 = ContractsToBillAt::<T>::iter().count() as u64;
        log::info!(
            "ðŸ”Ž ReworkBillingLoopInsertion pre migration: Number of existing contracts {:?}",
            contracts_count
        );

        info!("ðŸ‘¥  Smart Contract pallet to V10 passes PRE migrate checks âœ…",);
        Ok(contracts_count.encode())
    }

    fn on_runtime_upgrade() -> Weight {
        migrate_to_version_6::<T>()
    }

    #[cfg(feature = "try-runtime")]
    fn post_upgrade(pre_contracts_count: Vec<u8>) -> Result<(), &'static str> {
        info!("current pallet version: {:?}", PalletVersion::<T>::get());
        assert!(PalletVersion::<T>::get() >= types::StorageVersion::V10);

        // Check number of Contracts against pre-check result
        let pre_contracts_count: u64 = Decode::decode(&mut pre_contracts_count.as_slice())
            .expect("the state parameter should be something that was generated by pre_upgrade");
        assert_eq!(
            ContractsToBillAt::<T>::iter().count() as u64,
            pre_contracts_count,
            "Number of Contracts migrated does not match"
        );

        info!(
            "ðŸ‘¥  Smart Contract pallet to {:?} passes POST migrate checks âœ…",
            PalletVersion::<T>::get()
        );

        Ok(())
    }
}

pub fn migrate_to_version_6<T: Config>() -> frame_support::weights::Weight {
    if PalletVersion::<T>::get() == types::StorageVersion::V9 {
        info!(
            " >>> Starting contract pallet migration, pallet version: {:?}",
            PalletVersion::<T>::get()
        );

        // !!! This map storage is re-built from zero !!!

        // 1. Remove all items under ContractsToBillAt
        let _ = frame_support::migration::clear_storage_prefix(
            b"SmartContractModule",
            b"ContractsToBillAt",
            b"",
            None,
            None,
        );

        let mut r = 0u64;
        let mut w = 0u64;

        let billing_frequency = BillingFrequency::<T>::get();
        r.saturating_inc();
        let mut new_billing_loop = vec![vec![]; billing_frequency as usize];

        // 2. Insert contract ids in billing loop based on existing contracts
        for (contract_id, _contract) in Contracts::<T>::iter() {
            r.saturating_inc();
            let index = contract_id % billing_frequency;
            new_billing_loop[index as usize].push(contract_id);
        }

        // 3. Rebuild billing loop storage
        for (index, contract_ids) in new_billing_loop.iter().enumerate() {
            ContractsToBillAt::<T>::insert(index as u64, &contract_ids);
            w.saturating_inc();
        }

        // Update pallet storage version
        PalletVersion::<T>::set(types::StorageVersion::V10);
        w.saturating_inc();
        info!(" <<< Storage version upgraded");

        // Return the weight consumed by the migration.
        T::DbWeight::get().reads_writes(r, w)
    } else {
        info!(" >>> Unused Smart Contract pallet V10 migration");
        Weight::zero()
    }
}
