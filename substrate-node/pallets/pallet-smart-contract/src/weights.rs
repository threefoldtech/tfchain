
//! Autogenerated weights for pallet_smart_contract
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-22, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `R1-HP-ProBook-630-G8`, CPU: `11th Gen Intel(R) Core(TM) i5-1135G7 @ 2.40GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/tfchain
// benchmark
// pallet
// --chain=dev
// --pallet=pallet_smart_contract
// --extrinsic=*
// --steps=50
// --repeat=20
// --execution=wasm
// --heap-pages=4096
// --output
// pallets/pallet-smart-contract/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_smart_contract.
pub trait WeightInfo {
	fn create_node_contract() -> Weight;
	fn update_node_contract() -> Weight;
	fn cancel_contract() -> Weight;
	fn create_name_contract() -> Weight;
	fn cancel_name_contract() -> Weight;
	fn add_nru_reports() -> Weight;
	fn report_contract_resources() -> Weight;
	fn create_rent_contract() -> Weight;
	fn cancel_rent_contract() -> Weight;
	fn create_solution_provider() -> Weight;
	fn approve_solution_provider() -> Weight;
	fn bill_contract_for_block() -> Weight;
	fn service_contract_create() -> Weight;
	fn service_contract_set_metadata() -> Weight;
	fn service_contract_set_fees() -> Weight;
	fn service_contract_approve() -> Weight;
	fn service_contract_reject() -> Weight;
	fn service_contract_cancel() -> Weight;
	fn service_contract_bill() -> Weight;
	fn change_billing_frequency() -> Weight;
	fn attach_solution_provider_id() -> Weight;
}

/// Weights for pallet_smart_contract using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: TfgridModule NodePower (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:1)
	// Storage: SmartContractModule ActiveRentContractForNode (r:1 w:0)
	// Storage: SmartContractModule ContractIDByNodeIDAndHash (r:1 w:1)
	// Storage: SmartContractModule ContractID (r:1 w:1)
	// Storage: SmartContractModule BillingFrequency (r:1 w:0)
	// Storage: SmartContractModule ContractsToBillAt (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule ActiveNodeContracts (r:1 w:1)
	// Storage: SmartContractModule Contracts (r:0 w:1)
	// Storage: SmartContractModule ContractBillingInformationByID (r:0 w:1)
	// Storage: SmartContractModule ContractLock (r:0 w:1)
	fn create_node_contract() -> Weight {
		// Minimum execution time: 79_532 nanoseconds.
		Weight::from_ref_time(82_033_000)
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: SmartContractModule Contracts (r:1 w:1)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: SmartContractModule ActiveNodeContracts (r:1 w:1)
	// Storage: SmartContractModule ContractIDByNodeIDAndHash (r:0 w:2)
	fn update_node_contract() -> Weight {
		// Minimum execution time: 54_958 nanoseconds.
		Weight::from_ref_time(67_888_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: SmartContractModule Contracts (r:1 w:1)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: SmartContractModule ActiveNodeContracts (r:1 w:1)
	// Storage: TfgridModule TwinBoundedAccountID (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule ContractLock (r:1 w:1)
	// Storage: TfgridModule PricingPolicies (r:1 w:0)
	// Storage: SmartContractModule ContractBillingInformationByID (r:1 w:1)
	// Storage: SmartContractModule NodeContractResources (r:0 w:1)
	// Storage: SmartContractModule ContractIDByNodeIDAndHash (r:0 w:1)
	fn cancel_contract() -> Weight {
		// Minimum execution time: 91_576 nanoseconds.
		Weight::from_ref_time(94_239_000)
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: SmartContractModule ContractIDByNameRegistration (r:1 w:1)
	// Storage: SmartContractModule ContractID (r:1 w:1)
	// Storage: SmartContractModule BillingFrequency (r:1 w:0)
	// Storage: SmartContractModule ContractsToBillAt (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule Contracts (r:0 w:1)
	// Storage: SmartContractModule ContractLock (r:0 w:1)
	fn create_name_contract() -> Weight {
		// Minimum execution time: 43_110 nanoseconds.
		Weight::from_ref_time(45_457_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: SmartContractModule Contracts (r:1 w:1)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: TfgridModule TwinBoundedAccountID (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule ContractLock (r:1 w:1)
	// Storage: TfgridModule PricingPolicies (r:1 w:0)
	// Storage: SmartContractModule ContractIDByNameRegistration (r:0 w:1)
	// Storage: SmartContractModule ContractBillingInformationByID (r:0 w:1)
	fn cancel_name_contract() -> Weight {
		// Minimum execution time: 69_988 nanoseconds.
		Weight::from_ref_time(72_314_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule NodeIdByTwinID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule PricingPolicies (r:1 w:0)
	// Storage: SmartContractModule Contracts (r:1 w:0)
	// Storage: SmartContractModule ContractBillingInformationByID (r:1 w:1)
	fn add_nru_reports() -> Weight {
		// Minimum execution time: 59_118 nanoseconds.
		Weight::from_ref_time(66_154_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule NodeIdByTwinID (r:1 w:0)
	// Storage: SmartContractModule Contracts (r:1 w:0)
	// Storage: SmartContractModule BillingFrequency (r:1 w:0)
	// Storage: SmartContractModule ContractsToBillAt (r:1 w:1)
	// Storage: SmartContractModule NodeContractResources (r:0 w:1)
	fn report_contract_resources() -> Weight {
		// Minimum execution time: 47_799 nanoseconds.
		Weight::from_ref_time(49_349_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: SmartContractModule ActiveRentContractForNode (r:1 w:1)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule NodePower (r:1 w:0)
	// Storage: SmartContractModule ActiveNodeContracts (r:1 w:0)
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: SmartContractModule ContractID (r:1 w:1)
	// Storage: SmartContractModule BillingFrequency (r:1 w:0)
	// Storage: SmartContractModule ContractsToBillAt (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule Contracts (r:0 w:1)
	// Storage: SmartContractModule ContractLock (r:0 w:1)
	fn create_rent_contract() -> Weight {
		// Minimum execution time: 62_429 nanoseconds.
		Weight::from_ref_time(64_269_000)
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: SmartContractModule Contracts (r:1 w:1)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: SmartContractModule ActiveNodeContracts (r:1 w:0)
	// Storage: TfgridModule TwinBoundedAccountID (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule ContractLock (r:1 w:1)
	// Storage: TfgridModule PricingPolicies (r:1 w:0)
	// Storage: SmartContractModule ContractBillingInformationByID (r:0 w:1)
	// Storage: SmartContractModule ActiveRentContractForNode (r:0 w:1)
	fn cancel_rent_contract() -> Weight {
		// Minimum execution time: 77_045 nanoseconds.
		Weight::from_ref_time(79_333_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: SmartContractModule SolutionProviderID (r:1 w:1)
	// Storage: SmartContractModule SolutionProviders (r:0 w:1)
	fn create_solution_provider() -> Weight {
		// Minimum execution time: 23_391 nanoseconds.
		Weight::from_ref_time(24_135_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: SmartContractModule SolutionProviders (r:1 w:1)
	fn approve_solution_provider() -> Weight {
		// Minimum execution time: 26_622 nanoseconds.
		Weight::from_ref_time(29_783_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: SmartContractModule Contracts (r:1 w:0)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: TfgridModule TwinBoundedAccountID (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule ContractLock (r:1 w:0)
	// Storage: TfgridModule PricingPolicies (r:1 w:0)
	fn bill_contract_for_block() -> Weight {
		// Minimum execution time: 45_577 nanoseconds.
		Weight::from_ref_time(47_002_000)
			.saturating_add(T::DbWeight::get().reads(7))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:2 w:0)
	// Storage: SmartContractModule ServiceContractID (r:1 w:1)
	// Storage: SmartContractModule ServiceContracts (r:0 w:1)
	fn service_contract_create() -> Weight {
		// Minimum execution time: 34_706 nanoseconds.
		Weight::from_ref_time(35_276_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: SmartContractModule ServiceContracts (r:1 w:1)
	fn service_contract_set_metadata() -> Weight {
		// Minimum execution time: 31_145 nanoseconds.
		Weight::from_ref_time(32_127_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: SmartContractModule ServiceContracts (r:1 w:1)
	fn service_contract_set_fees() -> Weight {
		// Minimum execution time: 30_840 nanoseconds.
		Weight::from_ref_time(35_335_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: SmartContractModule ServiceContracts (r:1 w:1)
	fn service_contract_approve() -> Weight {
		// Minimum execution time: 31_510 nanoseconds.
		Weight::from_ref_time(35_239_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: SmartContractModule ServiceContracts (r:1 w:1)
	fn service_contract_reject() -> Weight {
		// Minimum execution time: 33_206 nanoseconds.
		Weight::from_ref_time(36_108_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: SmartContractModule ServiceContracts (r:1 w:1)
	fn service_contract_cancel() -> Weight {
		// Minimum execution time: 30_298 nanoseconds.
		Weight::from_ref_time(31_445_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: SmartContractModule ServiceContracts (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TfgridModule Twins (r:2 w:0)
	// Storage: System Account (r:1 w:0)
	fn service_contract_bill() -> Weight {
		// Minimum execution time: 51_292 nanoseconds.
		Weight::from_ref_time(53_518_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: SmartContractModule BillingFrequency (r:1 w:1)
	fn change_billing_frequency() -> Weight {
		// Minimum execution time: 21_291 nanoseconds.
		Weight::from_ref_time(21_652_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: SmartContractModule SolutionProviders (r:1 w:0)
	// Storage: SmartContractModule Contracts (r:1 w:1)
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	fn attach_solution_provider_id() -> Weight {
		// Minimum execution time: 40_627 nanoseconds.
		Weight::from_ref_time(41_784_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: TfgridModule NodePower (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:1)
	// Storage: SmartContractModule ActiveRentContractForNode (r:1 w:0)
	// Storage: SmartContractModule ContractIDByNodeIDAndHash (r:1 w:1)
	// Storage: SmartContractModule ContractID (r:1 w:1)
	// Storage: SmartContractModule BillingFrequency (r:1 w:0)
	// Storage: SmartContractModule ContractsToBillAt (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule ActiveNodeContracts (r:1 w:1)
	// Storage: SmartContractModule Contracts (r:0 w:1)
	// Storage: SmartContractModule ContractBillingInformationByID (r:0 w:1)
	// Storage: SmartContractModule ContractLock (r:0 w:1)
	fn create_node_contract() -> Weight {
		// Minimum execution time: 79_532 nanoseconds.
		Weight::from_ref_time(82_033_000)
			.saturating_add(RocksDbWeight::get().reads(11))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	// Storage: SmartContractModule Contracts (r:1 w:1)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: SmartContractModule ActiveNodeContracts (r:1 w:1)
	// Storage: SmartContractModule ContractIDByNodeIDAndHash (r:0 w:2)
	fn update_node_contract() -> Weight {
		// Minimum execution time: 54_958 nanoseconds.
		Weight::from_ref_time(67_888_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: SmartContractModule Contracts (r:1 w:1)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: SmartContractModule ActiveNodeContracts (r:1 w:1)
	// Storage: TfgridModule TwinBoundedAccountID (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule ContractLock (r:1 w:1)
	// Storage: TfgridModule PricingPolicies (r:1 w:0)
	// Storage: SmartContractModule ContractBillingInformationByID (r:1 w:1)
	// Storage: SmartContractModule NodeContractResources (r:0 w:1)
	// Storage: SmartContractModule ContractIDByNodeIDAndHash (r:0 w:1)
	fn cancel_contract() -> Weight {
		// Minimum execution time: 91_576 nanoseconds.
		Weight::from_ref_time(94_239_000)
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: SmartContractModule ContractIDByNameRegistration (r:1 w:1)
	// Storage: SmartContractModule ContractID (r:1 w:1)
	// Storage: SmartContractModule BillingFrequency (r:1 w:0)
	// Storage: SmartContractModule ContractsToBillAt (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule Contracts (r:0 w:1)
	// Storage: SmartContractModule ContractLock (r:0 w:1)
	fn create_name_contract() -> Weight {
		// Minimum execution time: 43_110 nanoseconds.
		Weight::from_ref_time(45_457_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: SmartContractModule Contracts (r:1 w:1)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: TfgridModule TwinBoundedAccountID (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule ContractLock (r:1 w:1)
	// Storage: TfgridModule PricingPolicies (r:1 w:0)
	// Storage: SmartContractModule ContractIDByNameRegistration (r:0 w:1)
	// Storage: SmartContractModule ContractBillingInformationByID (r:0 w:1)
	fn cancel_name_contract() -> Weight {
		// Minimum execution time: 69_988 nanoseconds.
		Weight::from_ref_time(72_314_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule NodeIdByTwinID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule PricingPolicies (r:1 w:0)
	// Storage: SmartContractModule Contracts (r:1 w:0)
	// Storage: SmartContractModule ContractBillingInformationByID (r:1 w:1)
	fn add_nru_reports() -> Weight {
		// Minimum execution time: 59_118 nanoseconds.
		Weight::from_ref_time(66_154_000)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule NodeIdByTwinID (r:1 w:0)
	// Storage: SmartContractModule Contracts (r:1 w:0)
	// Storage: SmartContractModule BillingFrequency (r:1 w:0)
	// Storage: SmartContractModule ContractsToBillAt (r:1 w:1)
	// Storage: SmartContractModule NodeContractResources (r:0 w:1)
	fn report_contract_resources() -> Weight {
		// Minimum execution time: 47_799 nanoseconds.
		Weight::from_ref_time(49_349_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: SmartContractModule ActiveRentContractForNode (r:1 w:1)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule NodePower (r:1 w:0)
	// Storage: SmartContractModule ActiveNodeContracts (r:1 w:0)
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: SmartContractModule ContractID (r:1 w:1)
	// Storage: SmartContractModule BillingFrequency (r:1 w:0)
	// Storage: SmartContractModule ContractsToBillAt (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule Contracts (r:0 w:1)
	// Storage: SmartContractModule ContractLock (r:0 w:1)
	fn create_rent_contract() -> Weight {
		// Minimum execution time: 62_429 nanoseconds.
		Weight::from_ref_time(64_269_000)
			.saturating_add(RocksDbWeight::get().reads(10))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: SmartContractModule Contracts (r:1 w:1)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: SmartContractModule ActiveNodeContracts (r:1 w:0)
	// Storage: TfgridModule TwinBoundedAccountID (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule ContractLock (r:1 w:1)
	// Storage: TfgridModule PricingPolicies (r:1 w:0)
	// Storage: SmartContractModule ContractBillingInformationByID (r:0 w:1)
	// Storage: SmartContractModule ActiveRentContractForNode (r:0 w:1)
	fn cancel_rent_contract() -> Weight {
		// Minimum execution time: 77_045 nanoseconds.
		Weight::from_ref_time(79_333_000)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: SmartContractModule SolutionProviderID (r:1 w:1)
	// Storage: SmartContractModule SolutionProviders (r:0 w:1)
	fn create_solution_provider() -> Weight {
		// Minimum execution time: 23_391 nanoseconds.
		Weight::from_ref_time(24_135_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: SmartContractModule SolutionProviders (r:1 w:1)
	fn approve_solution_provider() -> Weight {
		// Minimum execution time: 26_622 nanoseconds.
		Weight::from_ref_time(29_783_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: SmartContractModule Contracts (r:1 w:0)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: TfgridModule TwinBoundedAccountID (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule ContractLock (r:1 w:0)
	// Storage: TfgridModule PricingPolicies (r:1 w:0)
	fn bill_contract_for_block() -> Weight {
		// Minimum execution time: 45_577 nanoseconds.
		Weight::from_ref_time(47_002_000)
			.saturating_add(RocksDbWeight::get().reads(7))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:2 w:0)
	// Storage: SmartContractModule ServiceContractID (r:1 w:1)
	// Storage: SmartContractModule ServiceContracts (r:0 w:1)
	fn service_contract_create() -> Weight {
		// Minimum execution time: 34_706 nanoseconds.
		Weight::from_ref_time(35_276_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: SmartContractModule ServiceContracts (r:1 w:1)
	fn service_contract_set_metadata() -> Weight {
		// Minimum execution time: 31_145 nanoseconds.
		Weight::from_ref_time(32_127_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: SmartContractModule ServiceContracts (r:1 w:1)
	fn service_contract_set_fees() -> Weight {
		// Minimum execution time: 30_840 nanoseconds.
		Weight::from_ref_time(35_335_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: SmartContractModule ServiceContracts (r:1 w:1)
	fn service_contract_approve() -> Weight {
		// Minimum execution time: 31_510 nanoseconds.
		Weight::from_ref_time(35_239_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: SmartContractModule ServiceContracts (r:1 w:1)
	fn service_contract_reject() -> Weight {
		// Minimum execution time: 33_206 nanoseconds.
		Weight::from_ref_time(36_108_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: SmartContractModule ServiceContracts (r:1 w:1)
	fn service_contract_cancel() -> Weight {
		// Minimum execution time: 30_298 nanoseconds.
		Weight::from_ref_time(31_445_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: SmartContractModule ServiceContracts (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TfgridModule Twins (r:2 w:0)
	// Storage: System Account (r:1 w:0)
	fn service_contract_bill() -> Weight {
		// Minimum execution time: 51_292 nanoseconds.
		Weight::from_ref_time(53_518_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: SmartContractModule BillingFrequency (r:1 w:1)
	fn change_billing_frequency() -> Weight {
		// Minimum execution time: 21_291 nanoseconds.
		Weight::from_ref_time(21_652_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: SmartContractModule SolutionProviders (r:1 w:0)
	// Storage: SmartContractModule Contracts (r:1 w:1)
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	fn attach_solution_provider_id() -> Weight {
		// Minimum execution time: 40_627 nanoseconds.
		Weight::from_ref_time(41_784_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
