
//! Autogenerated weights for `pallet_smart_contract`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-17, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `R1-HP-ProBook-630-G8`, CPU: `11th Gen Intel(R) Core(TM) i5-1135G7 @ 2.40GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/tfchain
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet-smart-contract
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/pallet-smart-contract/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn create_node_contract() -> Weight;
	fn add_nru_reports() -> Weight;
	fn bill_contract_for_block() -> Weight;
}

/// Weight functions for `pallet_smart_contract`.
pub struct SmartContractWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SmartContractWeight<T> {
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: TfgridModule NodePower (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:1)
	// Storage: SmartContractModule ActiveRentContractForNode (r:1 w:0)
	// Storage: SmartContractModule ContractIDByNodeIDAndHash (r:1 w:1)
	// Storage: SmartContractModule ContractID (r:1 w:1)
	// Storage: SmartContractModule BillingFrequency (r:1 w:0)
	// Storage: SmartContractModule ContractsToBillAt (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule ActiveNodeContracts (r:1 w:1)
	// Storage: SmartContractModule Contracts (r:0 w:1)
	// Storage: SmartContractModule ContractBillingInformationByID (r:0 w:1)
	// Storage: SmartContractModule ContractLock (r:0 w:1)
	fn create_node_contract() -> Weight {
		// Minimum execution time: 47_138 nanoseconds.
		Weight::from_ref_time(52_452_000)
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule NodeIdByTwinID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule PricingPolicies (r:1 w:0)
	// Storage: SmartContractModule Contracts (r:1 w:0)
	// Storage: SmartContractModule ContractBillingInformationByID (r:1 w:1)
	fn add_nru_reports() -> Weight {
		// Minimum execution time: 39_469 nanoseconds.
		Weight::from_ref_time(41_868_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: SmartContractModule Contracts (r:1 w:0)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: SmartContractModule BillingFrequency (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule ContractLock (r:1 w:1)
	// Storage: TfgridModule PricingPolicies (r:1 w:0)
	// Storage: SmartContractModule ContractBillingInformationByID (r:1 w:1)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: SmartContractModule NodeContractResources (r:1 w:0)
	// Storage: SmartContractModule ActiveRentContractForNode (r:1 w:0)
	// Storage: TFTPriceModule AverageTftPrice (r:1 w:0)
	// Storage: TFTPriceModule MinTftPrice (r:1 w:0)
	// Storage: TFTPriceModule MaxTftPrice (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	fn bill_contract_for_block() -> Weight {
		// Minimum execution time: 70_039 nanoseconds.
		Weight::from_ref_time(72_166_000)
			.saturating_add(T::DbWeight::get().reads(14))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
