
//! Autogenerated weights for pallet_smart_contract
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-21, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `brandon-Legion-5-15ITH6`, CPU: `11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/tfchain
// benchmark
// pallet
// --chain=dev
// --pallet=pallet_smart_contract
// --extrinsic=*
// --steps=50
// --repeat=20
// --execution=wasm
// --heap-pages=4096
// --output
// pallets/pallet-smart-contract/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_smart_contract.
pub trait WeightInfo {
	fn create_node_contract() -> Weight;
	fn add_nru_reports() -> Weight;
	fn bill_contract_for_block() -> Weight;
}

/// Weights for pallet_smart_contract using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: TfgridModule NodePower (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:1)
	// Storage: SmartContractModule ActiveRentContractForNode (r:1 w:0)
	// Storage: SmartContractModule ContractIDByNodeIDAndHash (r:1 w:1)
	// Storage: SmartContractModule ContractID (r:1 w:1)
	// Storage: SmartContractModule BillingFrequency (r:1 w:0)
	// Storage: SmartContractModule ContractsToBillAt (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule ActiveNodeContracts (r:1 w:1)
	// Storage: SmartContractModule Contracts (r:0 w:1)
	// Storage: SmartContractModule ContractBillingInformationByID (r:0 w:1)
	// Storage: SmartContractModule ContractLock (r:0 w:1)
	fn create_node_contract() -> Weight {
		// Minimum execution time: 72_794 nanoseconds.
		Weight::from_ref_time(75_237_000)
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule NodeIdByTwinID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule PricingPolicies (r:1 w:0)
	// Storage: SmartContractModule Contracts (r:1 w:0)
	// Storage: SmartContractModule ContractBillingInformationByID (r:1 w:1)
	fn add_nru_reports() -> Weight {
		// Minimum execution time: 99_005 nanoseconds.
		Weight::from_ref_time(115_731_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: SmartContractModule Contracts (r:1 w:0)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: SmartContractModule BillingFrequency (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule ContractLock (r:1 w:1)
	// Storage: TfgridModule PricingPolicies (r:1 w:0)
	// Storage: SmartContractModule ContractBillingInformationByID (r:1 w:1)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: SmartContractModule NodeContractResources (r:1 w:0)
	// Storage: SmartContractModule ActiveRentContractForNode (r:1 w:0)
	// Storage: TFTPriceModule AverageTftPrice (r:1 w:0)
	// Storage: TFTPriceModule MinTftPrice (r:1 w:0)
	// Storage: TFTPriceModule MaxTftPrice (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	fn bill_contract_for_block() -> Weight {
		// Minimum execution time: 104_277 nanoseconds.
		Weight::from_ref_time(106_959_000)
			.saturating_add(T::DbWeight::get().reads(14))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: TfgridModule NodePower (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:1)
	// Storage: SmartContractModule ActiveRentContractForNode (r:1 w:0)
	// Storage: SmartContractModule ContractIDByNodeIDAndHash (r:1 w:1)
	// Storage: SmartContractModule ContractID (r:1 w:1)
	// Storage: SmartContractModule BillingFrequency (r:1 w:0)
	// Storage: SmartContractModule ContractsToBillAt (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule ActiveNodeContracts (r:1 w:1)
	// Storage: SmartContractModule Contracts (r:0 w:1)
	// Storage: SmartContractModule ContractBillingInformationByID (r:0 w:1)
	// Storage: SmartContractModule ContractLock (r:0 w:1)
	fn create_node_contract() -> Weight {
		// Minimum execution time: 72_794 nanoseconds.
		Weight::from_ref_time(75_237_000)
			.saturating_add(RocksDbWeight::get().reads(11))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule NodeIdByTwinID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule PricingPolicies (r:1 w:0)
	// Storage: SmartContractModule Contracts (r:1 w:0)
	// Storage: SmartContractModule ContractBillingInformationByID (r:1 w:1)
	fn add_nru_reports() -> Weight {
		// Minimum execution time: 99_005 nanoseconds.
		Weight::from_ref_time(115_731_000)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: SmartContractModule Contracts (r:1 w:0)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: SmartContractModule BillingFrequency (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SmartContractModule ContractLock (r:1 w:1)
	// Storage: TfgridModule PricingPolicies (r:1 w:0)
	// Storage: SmartContractModule ContractBillingInformationByID (r:1 w:1)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: SmartContractModule NodeContractResources (r:1 w:0)
	// Storage: SmartContractModule ActiveRentContractForNode (r:1 w:0)
	// Storage: TFTPriceModule AverageTftPrice (r:1 w:0)
	// Storage: TFTPriceModule MinTftPrice (r:1 w:0)
	// Storage: TFTPriceModule MaxTftPrice (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	fn bill_contract_for_block() -> Weight {
		// Minimum execution time: 104_277 nanoseconds.
		Weight::from_ref_time(106_959_000)
			.saturating_add(RocksDbWeight::get().reads(14))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
}