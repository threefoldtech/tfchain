
//! Autogenerated weights for pallet_dao
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-09, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `R1-HP-ProBook-630-G8`, CPU: `11th Gen Intel(R) Core(TM) i5-1135G7 @ 2.40GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/tfchain
// benchmark
// pallet
// --chain=dev
// --pallet=pallet_dao
// --extrinsic=*
// --steps=50
// --repeat=20
// --execution=wasm
// --heap-pages=4096
// --output
// pallets/pallet-dao/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_dao.
pub trait WeightInfo {
	fn propose() -> Weight;
	fn vote() -> Weight;
	fn veto() -> Weight;
	fn close() -> Weight;
}

/// Weights for pallet_dao using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: CouncilMembership Members (r:1 w:0)
	// Storage: Dao ProposalOf (r:1 w:1)
	// Storage: Dao ProposalCount (r:1 w:1)
	// Storage: Dao ProposalList (r:1 w:1)
	// Storage: Dao Voting (r:0 w:1)
	// Storage: Dao Proposals (r:0 w:1)
	fn propose() -> Weight {
		// Minimum execution time: 36_953 nanoseconds.
		Weight::from_ref_time(41_431_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: Dao Proposals (r:1 w:0)
	// Storage: Dao Voting (r:1 w:1)
	// Storage: Dao FarmWeight (r:1 w:0)
	fn vote() -> Weight {
		// Minimum execution time: 56_106 nanoseconds.
		Weight::from_ref_time(59_611_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: CouncilMembership Members (r:1 w:0)
	// Storage: Dao Proposals (r:1 w:0)
	// Storage: Dao Voting (r:1 w:1)
	fn veto() -> Weight {
		// Minimum execution time: 34_953 nanoseconds.
		Weight::from_ref_time(35_945_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: CouncilMembership Members (r:1 w:0)
	// Storage: Dao Voting (r:1 w:1)
	// Storage: Dao ProposalList (r:1 w:1)
	// Storage: Dao Proposals (r:0 w:1)
	// Storage: Dao ProposalOf (r:0 w:1)
	fn close() -> Weight {
		// Minimum execution time: 43_342 nanoseconds.
		Weight::from_ref_time(44_883_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: CouncilMembership Members (r:1 w:0)
	// Storage: Dao ProposalOf (r:1 w:1)
	// Storage: Dao ProposalCount (r:1 w:1)
	// Storage: Dao ProposalList (r:1 w:1)
	// Storage: Dao Voting (r:0 w:1)
	// Storage: Dao Proposals (r:0 w:1)
	fn propose() -> Weight {
		// Minimum execution time: 36_953 nanoseconds.
		Weight::from_ref_time(41_431_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: Dao Proposals (r:1 w:0)
	// Storage: Dao Voting (r:1 w:1)
	// Storage: Dao FarmWeight (r:1 w:0)
	fn vote() -> Weight {
		// Minimum execution time: 56_106 nanoseconds.
		Weight::from_ref_time(59_611_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: CouncilMembership Members (r:1 w:0)
	// Storage: Dao Proposals (r:1 w:0)
	// Storage: Dao Voting (r:1 w:1)
	fn veto() -> Weight {
		// Minimum execution time: 34_953 nanoseconds.
		Weight::from_ref_time(35_945_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: CouncilMembership Members (r:1 w:0)
	// Storage: Dao Voting (r:1 w:1)
	// Storage: Dao ProposalList (r:1 w:1)
	// Storage: Dao Proposals (r:0 w:1)
	// Storage: Dao ProposalOf (r:0 w:1)
	fn close() -> Weight {
		// Minimum execution time: 43_342 nanoseconds.
		Weight::from_ref_time(44_883_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
}