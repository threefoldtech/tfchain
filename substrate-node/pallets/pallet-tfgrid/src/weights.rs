// This file is part of Substrate.

// Copyright (C) 2022 Threefold Tech
// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_tfgrid
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2022-02-24, STEPS: [50, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Interpreted, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/tfchain
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet
// pallet_tfgrid
// --extrinsic
// *
// --execution
// wasm
// --heap-pages=4096
// --output=../pallets/pallet-tfgrid/src/weights.rs
// --raw
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_tfgrid.
pub trait WeightInfo {
    fn create_twin() -> Weight;
    fn create_farm() -> Weight;
    fn create_node() -> Weight;
    fn update_node() -> Weight;
    fn report_uptime() -> Weight;
}

/// Weights for pallet_tfgrid using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn create_twin() -> Weight {
        Weight::from_ref_time(301_555_000 as u64)
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    fn create_farm() -> Weight {
        Weight::from_ref_time(433_860_000 as u64)
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    fn create_node() -> Weight {
        Weight::from_ref_time(535_924_000 as u64)
            .saturating_add(T::DbWeight::get().reads(6 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    fn update_node() -> Weight {
        Weight::from_ref_time(478_710_000 as u64)
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    fn report_uptime() -> Weight {
        Weight::from_ref_time(247_084_000 as u64).saturating_add(T::DbWeight::get().reads(4 as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn create_twin() -> Weight {
        Weight::from_ref_time(301_555_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    fn create_farm() -> Weight {
        Weight::from_ref_time(433_860_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    fn create_node() -> Weight {
        Weight::from_ref_time(535_924_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(6 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    fn update_node() -> Weight {
        Weight::from_ref_time(478_710_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    fn report_uptime() -> Weight {
        Weight::from_ref_time(247_084_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
}
