
//! Autogenerated weights for pallet_tfgrid
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-13, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `R1-HP-ProBook-630-G8`, CPU: `11th Gen Intel(R) Core(TM) i5-1135G7 @ 2.40GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/tfchain
// benchmark
// pallet
// --chain=dev
// --pallet=pallet_tfgrid
// --extrinsic=*
// --steps=50
// --repeat=20
// --execution=wasm
// --heap-pages=4096
// --output
// pallets/pallet-tfgrid/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_tfgrid.
pub trait WeightInfo {
	fn set_storage_version() -> Weight;
	fn create_farm() -> Weight;
	fn update_farm() -> Weight;
	fn add_stellar_payout_v2address() -> Weight;
	fn set_farm_certification() -> Weight;
	fn add_farm_ip() -> Weight;
	fn remove_farm_ip() -> Weight;
	fn create_node() -> Weight;
	fn update_node() -> Weight;
	fn set_node_certification() -> Weight;
	fn report_uptime() -> Weight;
	fn add_node_public_config() -> Weight;
	fn delete_node() -> Weight;
	fn create_twin() -> Weight;
	fn update_twin() -> Weight;
	fn create_pricing_policy() -> Weight;
	fn update_pricing_policy() -> Weight;
	fn create_farming_policy() -> Weight;
	fn user_accept_tc() -> Weight;
	fn delete_node_farm() -> Weight;
	fn set_farm_dedicated() -> Weight;
	fn force_reset_farm_ip() -> Weight;
	fn set_connection_price() -> Weight;
	fn add_node_certifier() -> Weight;
	fn remove_node_certifier() -> Weight;
	fn update_farming_policy() -> Weight;
	fn attach_policy_to_farm() -> Weight;
	fn set_zos_version() -> Weight;
	fn change_power_state() -> Weight;
	fn change_power_target() -> Weight;
}

/// Weights for pallet_tfgrid using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: TfgridModule PalletVersion (r:0 w:1)
	fn set_storage_version() -> Weight {
		// Minimum execution time: 6_871 nanoseconds.
		Weight::from_ref_time(7_154_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule FarmID (r:1 w:1)
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: TfgridModule FarmIdByName (r:1 w:1)
	// Storage: TfgridModule Farms (r:0 w:1)
	fn create_farm() -> Weight {
		// Minimum execution time: 36_369 nanoseconds.
		Weight::from_ref_time(40_988_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:1)
	// Storage: TfgridModule FarmIdByName (r:1 w:1)
	fn update_farm() -> Weight {
		// Minimum execution time: 44_167 nanoseconds.
		Weight::from_ref_time(44_922_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule FarmPayoutV2AddressByFarmID (r:0 w:1)
	fn add_stellar_payout_v2address() -> Weight {
		// Minimum execution time: 33_678 nanoseconds.
		Weight::from_ref_time(45_459_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule Farms (r:1 w:1)
	fn set_farm_certification() -> Weight {
		// Minimum execution time: 29_774 nanoseconds.
		Weight::from_ref_time(34_790_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule Farms (r:1 w:1)
	// Storage: TfgridModule Twins (r:1 w:0)
	fn add_farm_ip() -> Weight {
		// Minimum execution time: 40_289 nanoseconds.
		Weight::from_ref_time(42_356_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule Farms (r:1 w:1)
	// Storage: TfgridModule Twins (r:1 w:0)
	fn remove_farm_ip() -> Weight {
		// Minimum execution time: 51_302 nanoseconds.
		Weight::from_ref_time(69_137_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule NodeIdByTwinID (r:1 w:1)
	// Storage: TfgridModule NodeID (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TfgridModule ConnectionPrice (r:1 w:0)
	// Storage: TfgridModule FarmingPoliciesMap (r:4 w:0)
	// Storage: TfgridModule NodesByFarmID (r:1 w:1)
	// Storage: Dao FarmWeight (r:1 w:1)
	// Storage: TfgridModule Nodes (r:0 w:1)
	fn create_node() -> Weight {
		// Minimum execution time: 76_991 nanoseconds.
		Weight::from_ref_time(78_678_000)
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: TfgridModule Nodes (r:1 w:1)
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: Dao FarmWeight (r:1 w:1)
	fn update_node() -> Weight {
		// Minimum execution time: 46_858 nanoseconds.
		Weight::from_ref_time(47_680_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: TfgridModule Nodes (r:1 w:1)
	// Storage: TfgridModule FarmingPoliciesMap (r:4 w:0)
	// Storage: TfgridModule Farms (r:1 w:0)
	fn set_node_certification() -> Weight {
		// Minimum execution time: 63_869 nanoseconds.
		Weight::from_ref_time(66_312_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule NodeIdByTwinID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn report_uptime() -> Weight {
		// Minimum execution time: 33_454 nanoseconds.
		Weight::from_ref_time(34_400_000)
			.saturating_add(T::DbWeight::get().reads(4))
	}
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:1)
	fn add_node_public_config() -> Weight {
		// Minimum execution time: 43_287 nanoseconds.
		Weight::from_ref_time(45_285_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule Nodes (r:1 w:1)
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule NodesByFarmID (r:1 w:1)
	// Storage: SmartContractModule ActiveNodeContracts (r:1 w:0)
	// Storage: SmartContractModule ActiveRentContractForNode (r:1 w:0)
	// Storage: Dao FarmWeight (r:1 w:1)
	fn delete_node() -> Weight {
		// Minimum execution time: 46_513 nanoseconds.
		Weight::from_ref_time(52_125_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: TfgridModule UsersTermsAndConditions (r:1 w:0)
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:1)
	// Storage: TfgridModule TwinID (r:1 w:1)
	// Storage: TfgridModule Twins (r:0 w:1)
	fn create_twin() -> Weight {
		// Minimum execution time: 29_902 nanoseconds.
		Weight::from_ref_time(30_722_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Twins (r:1 w:1)
	fn update_twin() -> Weight {
		// Minimum execution time: 31_527 nanoseconds.
		Weight::from_ref_time(32_394_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule PricingPolicyIdByName (r:1 w:1)
	// Storage: TfgridModule PricingPolicyID (r:1 w:1)
	// Storage: TfgridModule PricingPolicies (r:0 w:1)
	fn create_pricing_policy() -> Weight {
		// Minimum execution time: 29_401 nanoseconds.
		Weight::from_ref_time(30_106_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: TfgridModule PricingPolicies (r:1 w:1)
	// Storage: TfgridModule PricingPolicyIdByName (r:1 w:1)
	// Storage: TfgridModule PricingPolicyID (r:0 w:1)
	fn update_pricing_policy() -> Weight {
		// Minimum execution time: 35_430 nanoseconds.
		Weight::from_ref_time(40_977_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: TfgridModule FarmingPolicyID (r:1 w:1)
	// Storage: TfgridModule FarmingPoliciesMap (r:0 w:1)
	fn create_farming_policy() -> Weight {
		// Minimum execution time: 25_961 nanoseconds.
		Weight::from_ref_time(26_158_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TfgridModule UsersTermsAndConditions (r:1 w:1)
	fn user_accept_tc() -> Weight {
		// Minimum execution time: 14_850 nanoseconds.
		Weight::from_ref_time(15_171_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:1)
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: TfgridModule NodesByFarmID (r:1 w:1)
	// Storage: SmartContractModule ActiveNodeContracts (r:1 w:0)
	// Storage: SmartContractModule ActiveRentContractForNode (r:1 w:0)
	// Storage: Dao FarmWeight (r:1 w:1)
	// Storage: TfgridModule NodeIdByTwinID (r:0 w:1)
	fn delete_node_farm() -> Weight {
		// Minimum execution time: 60_225 nanoseconds.
		Weight::from_ref_time(61_546_000)
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: TfgridModule Farms (r:1 w:1)
	fn set_farm_dedicated() -> Weight {
		// Minimum execution time: 28_340 nanoseconds.
		Weight::from_ref_time(31_302_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule Farms (r:1 w:1)
	fn force_reset_farm_ip() -> Weight {
		// Minimum execution time: 29_623 nanoseconds.
		Weight::from_ref_time(30_778_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule ConnectionPrice (r:0 w:1)
	fn set_connection_price() -> Weight {
		// Minimum execution time: 18_386 nanoseconds.
		Weight::from_ref_time(20_282_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule AllowedNodeCertifiers (r:1 w:1)
	fn add_node_certifier() -> Weight {
		// Minimum execution time: 23_466 nanoseconds.
		Weight::from_ref_time(26_654_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule AllowedNodeCertifiers (r:1 w:1)
	fn remove_node_certifier() -> Weight {
		// Minimum execution time: 25_518 nanoseconds.
		Weight::from_ref_time(26_208_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule FarmingPoliciesMap (r:1 w:1)
	fn update_farming_policy() -> Weight {
		// Minimum execution time: 29_682 nanoseconds.
		Weight::from_ref_time(30_230_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule FarmingPoliciesMap (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:1)
	// Storage: TfgridModule NodesByFarmID (r:1 w:0)
	fn attach_policy_to_farm() -> Weight {
		// Minimum execution time: 40_191 nanoseconds.
		Weight::from_ref_time(45_311_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule ZosVersion (r:1 w:1)
	fn set_zos_version() -> Weight {
		// Minimum execution time: 19_929 nanoseconds.
		Weight::from_ref_time(22_135_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule NodeIdByTwinID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: TfgridModule NodePower (r:1 w:1)
	fn change_power_state() -> Weight {
		// Minimum execution time: 39_991 nanoseconds.
		Weight::from_ref_time(44_190_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule NodePower (r:1 w:1)
	fn change_power_target() -> Weight {
		// Minimum execution time: 39_174 nanoseconds.
		Weight::from_ref_time(40_372_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: TfgridModule PalletVersion (r:0 w:1)
	fn set_storage_version() -> Weight {
		// Minimum execution time: 6_871 nanoseconds.
		Weight::from_ref_time(7_154_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule FarmID (r:1 w:1)
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: TfgridModule FarmIdByName (r:1 w:1)
	// Storage: TfgridModule Farms (r:0 w:1)
	fn create_farm() -> Weight {
		// Minimum execution time: 36_369 nanoseconds.
		Weight::from_ref_time(40_988_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:1)
	// Storage: TfgridModule FarmIdByName (r:1 w:1)
	fn update_farm() -> Weight {
		// Minimum execution time: 44_167 nanoseconds.
		Weight::from_ref_time(44_922_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule FarmPayoutV2AddressByFarmID (r:0 w:1)
	fn add_stellar_payout_v2address() -> Weight {
		// Minimum execution time: 33_678 nanoseconds.
		Weight::from_ref_time(45_459_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule Farms (r:1 w:1)
	fn set_farm_certification() -> Weight {
		// Minimum execution time: 29_774 nanoseconds.
		Weight::from_ref_time(34_790_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule Farms (r:1 w:1)
	// Storage: TfgridModule Twins (r:1 w:0)
	fn add_farm_ip() -> Weight {
		// Minimum execution time: 40_289 nanoseconds.
		Weight::from_ref_time(42_356_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule Farms (r:1 w:1)
	// Storage: TfgridModule Twins (r:1 w:0)
	fn remove_farm_ip() -> Weight {
		// Minimum execution time: 51_302 nanoseconds.
		Weight::from_ref_time(69_137_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule NodeIdByTwinID (r:1 w:1)
	// Storage: TfgridModule NodeID (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TfgridModule ConnectionPrice (r:1 w:0)
	// Storage: TfgridModule FarmingPoliciesMap (r:4 w:0)
	// Storage: TfgridModule NodesByFarmID (r:1 w:1)
	// Storage: Dao FarmWeight (r:1 w:1)
	// Storage: TfgridModule Nodes (r:0 w:1)
	fn create_node() -> Weight {
		// Minimum execution time: 76_991 nanoseconds.
		Weight::from_ref_time(78_678_000)
			.saturating_add(RocksDbWeight::get().reads(12))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: TfgridModule Nodes (r:1 w:1)
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: Dao FarmWeight (r:1 w:1)
	fn update_node() -> Weight {
		// Minimum execution time: 46_858 nanoseconds.
		Weight::from_ref_time(47_680_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: TfgridModule Nodes (r:1 w:1)
	// Storage: TfgridModule FarmingPoliciesMap (r:4 w:0)
	// Storage: TfgridModule Farms (r:1 w:0)
	fn set_node_certification() -> Weight {
		// Minimum execution time: 63_869 nanoseconds.
		Weight::from_ref_time(66_312_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule NodeIdByTwinID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn report_uptime() -> Weight {
		// Minimum execution time: 33_454 nanoseconds.
		Weight::from_ref_time(34_400_000)
			.saturating_add(RocksDbWeight::get().reads(4))
	}
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:1)
	fn add_node_public_config() -> Weight {
		// Minimum execution time: 43_287 nanoseconds.
		Weight::from_ref_time(45_285_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule Nodes (r:1 w:1)
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule NodesByFarmID (r:1 w:1)
	// Storage: SmartContractModule ActiveNodeContracts (r:1 w:0)
	// Storage: SmartContractModule ActiveRentContractForNode (r:1 w:0)
	// Storage: Dao FarmWeight (r:1 w:1)
	fn delete_node() -> Weight {
		// Minimum execution time: 46_513 nanoseconds.
		Weight::from_ref_time(52_125_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: TfgridModule UsersTermsAndConditions (r:1 w:0)
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:1)
	// Storage: TfgridModule TwinID (r:1 w:1)
	// Storage: TfgridModule Twins (r:0 w:1)
	fn create_twin() -> Weight {
		// Minimum execution time: 29_902 nanoseconds.
		Weight::from_ref_time(30_722_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Twins (r:1 w:1)
	fn update_twin() -> Weight {
		// Minimum execution time: 31_527 nanoseconds.
		Weight::from_ref_time(32_394_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule PricingPolicyIdByName (r:1 w:1)
	// Storage: TfgridModule PricingPolicyID (r:1 w:1)
	// Storage: TfgridModule PricingPolicies (r:0 w:1)
	fn create_pricing_policy() -> Weight {
		// Minimum execution time: 29_401 nanoseconds.
		Weight::from_ref_time(30_106_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: TfgridModule PricingPolicies (r:1 w:1)
	// Storage: TfgridModule PricingPolicyIdByName (r:1 w:1)
	// Storage: TfgridModule PricingPolicyID (r:0 w:1)
	fn update_pricing_policy() -> Weight {
		// Minimum execution time: 35_430 nanoseconds.
		Weight::from_ref_time(40_977_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: TfgridModule FarmingPolicyID (r:1 w:1)
	// Storage: TfgridModule FarmingPoliciesMap (r:0 w:1)
	fn create_farming_policy() -> Weight {
		// Minimum execution time: 25_961 nanoseconds.
		Weight::from_ref_time(26_158_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TfgridModule UsersTermsAndConditions (r:1 w:1)
	fn user_accept_tc() -> Weight {
		// Minimum execution time: 14_850 nanoseconds.
		Weight::from_ref_time(15_171_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:1)
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule Twins (r:1 w:0)
	// Storage: TfgridModule NodesByFarmID (r:1 w:1)
	// Storage: SmartContractModule ActiveNodeContracts (r:1 w:0)
	// Storage: SmartContractModule ActiveRentContractForNode (r:1 w:0)
	// Storage: Dao FarmWeight (r:1 w:1)
	// Storage: TfgridModule NodeIdByTwinID (r:0 w:1)
	fn delete_node_farm() -> Weight {
		// Minimum execution time: 60_225 nanoseconds.
		Weight::from_ref_time(61_546_000)
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: TfgridModule Farms (r:1 w:1)
	fn set_farm_dedicated() -> Weight {
		// Minimum execution time: 28_340 nanoseconds.
		Weight::from_ref_time(31_302_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule Farms (r:1 w:1)
	fn force_reset_farm_ip() -> Weight {
		// Minimum execution time: 29_623 nanoseconds.
		Weight::from_ref_time(30_778_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule ConnectionPrice (r:0 w:1)
	fn set_connection_price() -> Weight {
		// Minimum execution time: 18_386 nanoseconds.
		Weight::from_ref_time(20_282_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule AllowedNodeCertifiers (r:1 w:1)
	fn add_node_certifier() -> Weight {
		// Minimum execution time: 23_466 nanoseconds.
		Weight::from_ref_time(26_654_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule AllowedNodeCertifiers (r:1 w:1)
	fn remove_node_certifier() -> Weight {
		// Minimum execution time: 25_518 nanoseconds.
		Weight::from_ref_time(26_208_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule FarmingPoliciesMap (r:1 w:1)
	fn update_farming_policy() -> Weight {
		// Minimum execution time: 29_682 nanoseconds.
		Weight::from_ref_time(30_230_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule FarmingPoliciesMap (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:1)
	// Storage: TfgridModule NodesByFarmID (r:1 w:0)
	fn attach_policy_to_farm() -> Weight {
		// Minimum execution time: 40_191 nanoseconds.
		Weight::from_ref_time(45_311_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule ZosVersion (r:1 w:1)
	fn set_zos_version() -> Weight {
		// Minimum execution time: 19_929 nanoseconds.
		Weight::from_ref_time(22_135_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule NodeIdByTwinID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: TfgridModule NodePower (r:1 w:1)
	fn change_power_state() -> Weight {
		// Minimum execution time: 39_991 nanoseconds.
		Weight::from_ref_time(44_190_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: TfgridModule TwinIdByAccountID (r:1 w:0)
	// Storage: TfgridModule Nodes (r:1 w:0)
	// Storage: TfgridModule Farms (r:1 w:0)
	// Storage: TfgridModule NodePower (r:1 w:1)
	fn change_power_target() -> Weight {
		// Minimum execution time: 39_174 nanoseconds.
		Weight::from_ref_time(40_372_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}