use crate::*;
use frame_support::{traits::Get, traits::OnRuntimeUpgrade, weights::Weight};
use frame_support::log::{debug, info};
use sp_std::marker::PhantomData;

#[cfg(feature = "try-runtime")]
use codec::Decode;
#[cfg(feature = "try-runtime")]
use sp_std::vec::Vec;

pub struct MigrateBurnTransactionsV2<T: Config>(PhantomData<T>);

impl<T: Config> OnRuntimeUpgrade for MigrateBurnTransactionsV2<T> {
    #[cfg(feature = "try-runtime")]
    fn pre_upgrade() -> Result<Vec<u8>, &'static str> {
        info!("current pallet version: {:?}", PalletVersion::<T>::get());
        assert!(PalletVersion::<T>::get() >= types::StorageVersion::V1);

        let burn_transactions_count: u64 = BurnTransactions::<T>::iter().count() as u64;
        log::info!(
            "ðŸ”Ž MigrateBurnTransactionsV2 pre migration: Number of existing burn transactions {:?}",
            burn_transactions_count
        );

        let executed_burn_transactions_count: u64 = ExecutedBurnTransactions::<T>::iter().count() as u64;
        log::info!(
            "ðŸ”Ž MigrateBurnTransactionsV2 pre migration: Number of existing executed burn transactions {:?}",
            executed_burn_transactions_count
        );

        info!("ðŸ‘¥  TFT-BRIDGE pallet to V1 passes PRE migrate checks âœ…",);
        Ok((burn_transactions_count + executed_burn_transactions_count).encode())
    }

    fn on_runtime_upgrade() -> Weight {
        if PalletVersion::<T>::get() == types::StorageVersion::V1 {
            migrate_burn_transactions::<T>()
        } else {
            info!(" >>> Unused TFT-BRIDGE pallet V2 migration");
            Weight::zero()
        }
    }

    #[cfg(feature = "try-runtime")]
    fn post_upgrade(pre_burn_transactions_count: Vec<u8>) -> Result<(), &'static str> {
        info!("current pallet version: {:?}", PalletVersion::<T>::get());
        assert!(PalletVersion::<T>::get() >= types::StorageVersion::V2);

        // Check number of burn_transactions against pre-check result
        let pre_burn_transactions_count: u64 = Decode::decode(&mut pre_burn_transactions_count.as_slice())
            .expect("the state parameter should be something that was generated by pre_upgrade");
        assert_eq!(
            BurnTransactions::<T>::iter().count() as u64 + ExecutedBurnTransactions::<T>::iter().count() as u64,
            pre_burn_transactions_count,
            "Number of burn_transactions migrated does not match"
        );

        info!(
            "ðŸ‘¥  TFT-BRIDGE pallet migration to {:?} passes POST migrate checks âœ…",
            Pallet::<T>::pallet_version()
        );

        Ok(())
    }
}

pub fn migrate_burn_transactions<T: Config>() -> frame_support::weights::Weight {
    info!(" >>> Migrating burn transactions storage...");

    let mut read_writes = 0;

    BurnTransactions::<T>::translate::<super::types::v1::BurnTransaction<T::BlockNumber>, _>(|k, burn_transaction| {
        debug!("migrated burn transaction: {:?}", k);

        let new_burn_transaction = types::BurnTransaction::<T::AccountId, T::BlockNumber> {
            block: burn_transaction.block,
            amount: burn_transaction.amount,
            source: None,
            target: burn_transaction.target,
            signatures: burn_transaction.signatures,
            sequence_number: burn_transaction.sequence_number
        };

        read_writes += 1;
        Some(new_burn_transaction)
    });

    ExecutedBurnTransactions::<T>::translate::<super::types::v1::BurnTransaction<T::BlockNumber>, _>(|k, executed_burn_transaction| {
        debug!("migrated executed burn transaction: {:?}", k);

        let new_executed_burn_transaction = types::BurnTransaction::<T::AccountId, T::BlockNumber> {
            block: executed_burn_transaction.block,
            amount: executed_burn_transaction.amount,
            source: None,
            target: executed_burn_transaction.target,
            signatures: executed_burn_transaction.signatures,
            sequence_number: executed_burn_transaction.sequence_number
        };

        read_writes += 1;
        Some(new_executed_burn_transaction)
    });

    // Update pallet storage version
    PalletVersion::<T>::set(types::StorageVersion::V2);
    info!(" <<< burnTransactions migration success, storage version upgraded");

    // Return the weight consumed by the migration.
    T::DbWeight::get().reads_writes(read_writes, read_writes + 1)
}